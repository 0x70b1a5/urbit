#!/usr/bin/python

# write script for fuse/api/urb demo

# specify mount ship/desk/case
# vere should start this as a child process
# filenames (.)
# speed
#   could say if no . then dir (else check)
#   drop size, thus no roundtrip on getattr

import os
import sys
import stat
import errno
import fuse
import logging
import json
import requests
import datetime
import collections

logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)s %(funcName)s %(lineno)s - %(message)s',
                    filename='log')


fuse.fuse_python_api = (0, 2)

url = "http://localhost:12321"

CacheEntry = collections.namedtuple('CacheEntry', ['when', 'what'])

class Stat(fuse.Stat):
    def __init__(self):
        self.st_mode = 0
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 0
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 0
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

class FS(fuse.Fuse):

    def __init__(self, **kwargs):
        self.xcache = {}
        super(FS, self).__init__(**kwargs)

    def _get_x(self, path):
        payload = \
          {'source':
            {'as': {'mark': 'tang', 'next':
            {'hoon': {'code': '|=(@t [leaf+(trip +<)]~)', 'next':
            {'as': {'mark': 'md', 'next': {'clay': '/===%s' % path}}}}}}},
           'sink': {'stdout': None}}
        r = requests.post(url, data=json.dumps(payload))
        if r.text[0] == '"':
            return r.text[1:-1].decode('string_escape').encode('ascii') + '\n'
        else:
            logging.warn("unrecognized response")
            return '\n'

    def _is_dir(self, path):
        payload = \
          {'source':
            {'hoon': {'code': '(cury test ~)', 'next':
            {'hoon': {'code': 'head', 'next':
            {'dojo':
              '.^(arch %%cy /===%s)' % (path if path != '/' else '')}}}}},
           'sink':
            {'stdout': None}}
        r = requests.post(url, data=json.dumps(payload))
        logging.debug('%s is%s a directory: %s' %
                      (path, '' if r.text == '"%.y"' else ' not', r.text))
        return r.text == '"%.y"'

    def _direntries(self, path):
        payload = \
          {'source':
            {'hoon': {'code': '|=((list {knot $~}) (turn +< head))', 'next':
            {'hoon': {'code': '|=((map knot $~) (~(tap by +<)))', 'next':
            {'hoon': {'code': 'tail', 'next':
            {'dojo':
              '.^(arch %%cy /===%s)' % (path if path != '/' else '')}}}}}}},
           'sink':
            {'stdout': None}}
        r = requests.post(url, data=json.dumps(payload))
        logging.debug([x.encode('ascii') for x in r.text[1:-1].split('/')[1:]])
        return [x.encode('ascii') for x in r.text[1:-1].split('/')[1:]]

    def _read_file(self, path):
        logging.debug('_read_file %s' % path)
        logging.debug('xcache %s' % str(self.xcache))
        if self.xcache.get(path) is None or \
           datetime.datetime.now() - self.xcache.get(path).when > \
               datetime.timedelta(0, 2):
            logging.debug('None %s' % path)
            result = self._get_x(path)
            logging.debug(self.xcache)
            self.xcache[path] = CacheEntry(datetime.datetime.now(), result)
            logging.debug(self.xcache)
            return result
        else:
            logging.debug('not None %s %s' %
                (datetime.datetime.now() - self.xcache.get(path).when,
                  self.xcache.get(path)))
            return self.xcache.get(path).what

    def getattr(self, path):
        logging.debug('getattr %s' % path)
        
        st = Stat()
        if self._is_dir(path):
            st.st_mode = stat.S_IFDIR | 0755
            st.st_nlink = 2
        else:
            st.st_mode = stat.S_IFREG | 0444
            st.st_nlink = 1
            st.st_size = len(self._read_file(path))
        return st

    def readdir(self, path, offset):
        logging.debug('readdir %s' % path)
        for child in ['.', '..'] + self._direntries(path):
            yield fuse.Direntry(child)

    def open(self, path, flags):
        logging.debug('open %s' % path)
        accmode = os.O_RDONLY | os.O_WRONLY | os.O_RDWR
        if (flags & accmode) != os.O_RDONLY:
            return -errno.EACCES

    def read(self, path, size, offset):
        logging.debug('read %s' % path)
        text = self._read_file(path)
        
        # with open('/home/philip/urbit/urb/log', 'w') as f:
        #     f.write(str([text, len(text), "\\'dull the pain\\'", len("\\'dull the pain\\'")]))
        length = len(text)
        if offset < length:
            if offset + size > length:
                size = length - offset
            buf = text[offset:offset+size]
        else:
            buf = ''
        return buf

def main():
    usage="""
Just Do It

""" + fuse.Fuse.fusage

    server= FS(version="%prog " + fuse.__version__,
                    usage=usage,
                    dash_s_do='setsingle')
    server.parse(errex=1)
    server.main()

if __name__ == '__main__':
    main()
